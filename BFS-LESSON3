#include <iostream>
#include <queue>
#include <vector>

using namespace std;

class Graph {
private:
  vector<vector<int>> adjMatrix; // Matriz de adyacencia
  int numVertices;

public:
  // Constructor
  Graph(int vertices) {
    numVertices = vertices;
    adjMatrix.resize(vertices, vector<int>(vertices, 0));
  }

  // CREATE: Agregar una arista
  void addEdge(int u, int v) {
    adjMatrix[u][v] = 1;
    adjMatrix[v][u] = 1;
  }

  // READ: Mostrar la matriz de adyacencia
  void printMatrix() {
    for (int i = 0; i < numVertices; i++) {
      for (int j = 0; j < numVertices; j++) {
        cout << adjMatrix[i][j] << " ";
      }
      cout << endl;
    }
  }

  // UPDATE: Actualizar una arista
  void updateEdge(int u, int v, int value) {
    adjMatrix[u][v] = value;
    adjMatrix[v][u] = value;
  }

  // DELETE: Eliminar una arista
  void deleteEdge(int u, int v) {
    adjMatrix[u][v] = 0;
    adjMatrix[v][u] = 0;
  }

  // BFS: Recorrido en anchura
  void BFS(int startVertex) {
    vector<bool> visited(numVertices, false);
    queue<int> q;

    visited[startVertex] = true;
    q.push(startVertex);

    while (!q.empty()) {
      int vertex = q.front();
      cout << vertex << " ";
      q.pop();

      for (int i = 0; i < numVertices; i++) {
        if (adjMatrix[vertex][i] == 1 && !visited[i]) {
          visited[i] = true;
          q.push(i);
        }
      }
    }
    cout << endl;
  }

  // Visualizar el grafo como una lista de adyacencia
  void visualizeGraph() {
    cout << "Visualización del Grafo (Lista de Adyacencia):" << endl;
    for (int i = 0; i < numVertices; i++) {
      cout << i << ": ";
      for (int j = 0; j < numVertices; j++) {
        if (adjMatrix[i][j] == 1) {
          cout << j << " ";
        }
      }
      cout << endl;
    }
  }
};

int main() {
  Graph g(6); // Grafo con 6 vértices

  // Crear algunas aristas
  g.addEdge(0, 1);
  g.addEdge(0, 2);
  g.addEdge(1, 2);
  g.addEdge(1, 3);
  g.addEdge(1, 4);
  g.addEdge(2, 4);
  g.addEdge(3, 5);
  g.addEdge(4, 5);

  // Leer la matriz de adyacencia
  cout << "Matriz de Adyacencia:" << endl;
  g.printMatrix();

  // Visualizar el grafo
  cout << "\nVisualización del Grafo:" << endl;
  g.visualizeGraph();

  // Recorrido BFS
  cout << "\nBFS desde el vértice 0:" << endl;
  g.BFS(1);

  // Actualizar una arista
  cout << "\nActualizando la arista (0, 1) a 0 (eliminarla):" << endl;
  g.updateEdge(0, 1, 0);
  g.printMatrix();

  // Eliminar una arista
  cout << "\nEliminando la arista (1, 3):" << endl;
  g.deleteEdge(1, 3);
  g.printMatrix();

  return 0;
}
