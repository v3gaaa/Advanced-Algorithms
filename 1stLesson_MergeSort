#include <iostream>
#include <algorithm>
using namespace std;

// Declaración de funciones
void mergeSort(int arr[], int left, int right);
void merge(int arr[], int left, int mid, int right);

int main() {
    int N;
    cout << "Ingresa el número de elementos: ";
    cin >> N;

    int arr[N];
    cout << "Ingresa los valores: " << endl;
    for (int i = 0; i < N; i++) {
        cin >> arr[i];
    }

    // Ordenar el arreglo de menor a mayor
    mergeSort(arr, 0, N - 1);

    // Invertir el orden para que sea de mayor a menor
    reverse(arr, arr + N);

    cout << "Valores ordenados de mayor a menor: " << endl;
    for (int i = 0; i < N; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}

// Merge sort
void mergeSort(int arr[], int left, int right) {
    
    // Caso base
    if (left >= right) {
        return;
    }

    // Caso general
    int mid = left + (right - left) / 2;
    mergeSort(arr, left, mid);
    mergeSort(arr, mid + 1, right);

    merge(arr, left, mid, right);
}

// Función merge (Para merge sort)
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int i = 0; i < n2; i++)
        R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
